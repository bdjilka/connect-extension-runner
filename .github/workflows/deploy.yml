name: Deploy CloudBlue Connect EaaS Extension Runner

on:
  push:
    tags:
        - '*'
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    - name: Linting
      run: |
        poetry run flake8
    - name: Testing
      run: |
        poetry run pytest
    - name: Extract tag name
      uses: actions/github-script@v3
      id: tag
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          return context.payload.ref.replace(/refs\/tags\//, '')
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        poetry version ${{ steps.tag.outputs.result }}
        poetry build
        poetry publish -u $TWINE_USERNAME -p $TWINE_PASSWORD
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: cloudblueconnect/connect-extension-runner
        tags: |
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.tag.outputs.result }}.0
          type=semver,pattern={{major}},value=${{ steps.tag.outputs.result }}.0
        flavor: |
          latest=false
    - name: Build and push docker image
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        build-args: |
          RUNNER_VERSION=${{ steps.tag.outputs.result }}
        tags: ${{ steps.meta.outputs.tags }}
    - name: Docker image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
